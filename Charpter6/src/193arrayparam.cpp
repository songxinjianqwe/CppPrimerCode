#include <iostream>
using namespace std;
//数组作为形参
//数组作为形参，实际上就是一个指向数组首元素的指针
//将一个数组作为实参，传递过去的也是指向数组首元素的地址
void print(const int *i);
void print(const int arr[]);
void print(const int arr[10] );
//这三种形式的效果相同
//形参为数组的话，可以声明为数组形式（不必加上长度，编译器会忽略），也可以声明为指针
//const的问题和引用一致：想要修改实参的值的话，不用const指针；不想修改，使用const指针（指向常量的指针）

//因为传入的数组被转为指向数组首元素的指针，因此丢失了长度信息
//有三种方式来管理数组长度：
//1)数组加入一个结束标记（如C风格的字符串）
//2)传入数组的首元素和尾后元素的指针（begin和end）
//3)加一个指示数组长度的参数，类型是size_t

//除了使用指针来传递数组外，还可以通过引用来传递数组
//一个特点是必须指明数组的大小，因为数组的引用与数组的大小必须绑定
//当然数组引用也可以声明为const的

//这种形式比指针的形式 对于实参的要求严格的多，对于指针而言，哪怕实参是一个元素的指针都可以，对于数组的大小也没有要求
//而数组引用会要求实参必须为数组，且长度必须为10
void print(int (&arr)[10]) {
	for (auto i : arr) {
		cout << i << "\t";
	}
	cout << endl;
}

//传递多维数组
//多维数组就是数组的数组。编译器会忽略最高维的长度，除了最高维之外的长度都需要指定
//对于二维数组而言，形参可以写成二维数组的形式
//因为传递过程中二维数组会转为指向二维数组首元素（一维数组）的指针，因此形参也可以声明为一维数组的指针（需要指定长度）
//当然，还需要加上一个形参，指明最高维的长度
void print(int arr[][10][10]) {

}
void print(int arr[][10],int row) {

}
void print(int(*arr)[10],int row) {

}

